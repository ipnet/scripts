[user]
name = zhuzhenjie
email = zhuzj94@gmail.com
[filter "lfs"]
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f
process = git-lfs filter-process
required = true
[http "https://github.com"]
proxy = socks5://127.0.0.1:10808
[https "https://github.com"]
proxy = socks5://127.0.0.1:10808
[http]
postbuffer = 5m
[core]
autocrlf = true
packedGitLimit = 128m
packedGitWindowSize = 128m

[pack]
deltaCacheSize = 128m
packSizeLimit = 128m
windowMemory = 128m

[http]
postbuffer = 5m

[credential]
helper = store
[credential "https://gitee.com"]
provider = generic
[credential "https://code.eblssmart.com"]
provider = generic
[credential "https://gogs.ipcrystal.com"]
provider = generic
[credential "https://code.ipcrystal.com"]
provider = generic

[difftool "sourcetree"]
cmd = '' \"$LOCAL\" \"$REMOTE\"
[mergetool "sourcetree"]
cmd = "'' "
trustExitCode = true
[alias]
b = branch
# 关联远程分支和本地分支
# git branch --set-upstream-to=origin/develop develop
bvv = branch -vv
br =!git branch --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(contents:subject) %(color:green)(%(committerdate:relative)) [%(authorname)]' --sort=-committerdate && git branch -vv --sort=-committerdate
# 切换分支
ch=checkout

# 检出本地分支
chb=checkout -b

# cls
cls = !git checkout . && git clean -xdf

# 删除本地分支
rmb = branch -D

# 删除远程分支
rmrb = push origin --delete

rb = rebase

## init -> addurl
# 获取远程地址
geturl = !git remote -v

# 添加远程地址
addurl = !git remote add origin

# 修改远程地址
seturl = !git remote set-url origin

## copy -> seturl
# 复制到新仓库
copy = !git push --mirror

# 拉当前分支代码
# pl=!git pull --rebase origin HEAD
pl=!git pull origin HEAD

# 推送到当前分支
ps=!git push origin HEAD
done=!git push origin HEAD

# 提交到本地
cm = !git add -A && git commit -m
save = !git add -A && git commit -m

# 强制回滚
back = !git reset --hard
backs = !git reset --soft
backm= !git reset --mixed

# 查看文件状态
st=status

# 让git在搜索文件列表时，忽略某个文件，这样该文件即使有修改，git也不会关心
addign = !git update-index --skip-worktree
showign = !git ls-files -v . | grep "^S"
lsign = !git ls-files -v . | grep "^S"
# 要用全路径！！！
rmign = !git update-index --no-skip-worktree


# 查看日志 from lg2 --stat
logs = log --graph --abbrev-commit --decorate --date=format:'%Y-%m-%d %H:%M:%S' --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%cd%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'

# logs = !git log --color --stat --date=format:'%Y-%m-%d %H:%M:%S' --pretty=format:'%C(cyan)%h%Creset -%C(yellow)%d %Cgreen(%cd) %Cgreen(%cr) %C(bold blue)<%an>%n%C(bold red)%f%n%n%C(bold red)%b%Creset' --abbrev-commit --graph



# lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
# lg11 = log --graph --abbrev-commit --decorate --date=format:'%Y/%m/%d %H:%M:%S' --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)'
# lg2 = log --graph --abbrev-commit --decorate --date=format:'%Y/%m/%d %H:%M:%S' --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%cd%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%n'


#     count-log = log --all --graph --pretty=format:' '
#     tably-log = log --all --graph --decorate=short --color --pretty=format:'+%C(bold 214)%<(7,trunc)%h%C(reset)+%C(dim white)%>(12,trunc)%cr%C(reset)+%C(auto)%>(15,trunc)%D%C(reset)+%C(white)%s%C(reset)'
#     tably     = !bash -c '"                                                                                                    \
#                   while IFS=+ read -r graph;do                                                                                 \
#                     chars_count=$(sed -nl1000 \"l\" <<< \"$graph\" | grep -Eo \"\\\\\\\\\\\\\\\\|\\||\\/|\\ |\\*|_\" | wc -l); \
#                     [[ $chars_count -gt ${max_chars:-0} ]] && max_chars=$chars_count;                                          \
#                   done < <(git count-log && echo);                                                                             \
#                   while IFS=+ read -r graph hash time branch message;do                                                        \
#                     chars=$(sed -nl1000 \"l\" <<< \"$graph\" | grep -Eo \"\\\\\\\\\\\\\\\\|\\||\\/|\\ |\\*|_\" | wc -l);       \
#                     whitespaces=$(($max_chars-$chars));                                                                        \
#                     whitespaces=$(seq -s\" \" $whitespaces|tr -d \"[:digit:]\");                                               \
#                     graph_all=\"$graph_all$graph$whitespaces\n\";                                                              \
#                     hash_all=\"$hash_all$(printf \"%7s\" \"$hash\")  \n\";                                                     \
#                     time_all=\"$time_all$(printf \"%12s\" \"$time\") \n\";                                                     \
#                     branch_all=\"$branch_all$(printf \"%15s\" \"$branch\")\n\";                                                \
#                     message_all=\"$message_all$message\n\";                                                                    \
#                   done < <(git tably-log && echo);                                                                             \
#                   paste -d\" \" <(echo -e \"$time_all\") <(echo -e \"$branch_all\") <(echo -e \"$graph_all\")                  \
#                                 <(echo -e \"$hash_all\") <(echo -e \"$message_all\");                                          \
#                 '"